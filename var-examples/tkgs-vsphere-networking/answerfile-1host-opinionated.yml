# path to vCenter installer ISO
vc_iso: "{{ lookup('env', 'SOFTWARE_DIR') }}/VMware-VCSA-all-7.0.1-17327517.iso"
esxi_ova: "{{ lookup('env', 'SOFTWARE_DIR') }}/Nested_ESXi7.0.1_Appliance_Template_v1.ova"

environment_tag: "tkgs" # Used to prepend object names
dns_server: "192.168.0.110"
dns_domain: "home.local"
ntp_server_ip: "192.168.0.1"
disk_mode: thin #How all disks should be deployed
# This will be set everywhere!
nested_host_password: "{{ opinionated.master_password }}"

hosting_vcenter: # This is the vCenter which will be the target for nested vCenters and ESXi hosts
  ip: "192.168.0.113"
  username: "{{ lookup('env', 'PARENT_VCENTER_USERNAME') }}"
  password: "{{ lookup('env', 'PARENT_VCENTER_PASSWORD') }}"
  datacenter: "Home" # Target for all VM deployment

# This section is only referenced by other variables in this file
opinionated:
  master_password: "VMware1!"
  number_of_hosts: 1 # number of ESXi VMs to deploy
  nested_hosts:
    cpu_cores: 6 # CPU count per nested host
    ram_in_gb: 96 # memory per nested host
    local_disks: # (optional) this section can be removed to not modify local disks
      - size_gb: 400
        datastore_prefix: "datastore" # omit this to not have a datastore created
  hosting_cluster: Physical
  hosting_datastore: NVME
  hosting_network:
    base:
      port_group: Nest
      vlan_id: 0
      cidr: "192.168.0.0/22"
      gateway: "192.168.0.1"
      # A TKGS deployment requires 8 IPs, plus 1 per esxi host. They MUST be contiguous.
      starting_addr: "192.168.0.170"
    # If you want to provide your own routing between networks, delete the tkgs.router section
    # If using your own network you must provide at least a /25.
    workload:
      port_group: tkgs-workload
      vlan_id: 0
      cidr: "172.31.0.0/24"
      gateway: "172.31.0.1"

#####################################################################
### No need to edit below this line for an opinionated deployment ###
#####################################################################

nested_vcenter: # the vCenter appliance that will be deployed
  ip: "{{ opinionated.hosting_network.base.starting_addr }}" # vCenter ip address 
  mask: "{{ opinionated.hosting_network.base.cidr.split('/')[1] }}"
  gw: "{{ opinionated.hosting_network.base.gateway }}"
  host_name: "{{ opinionated.hosting_network.base.starting_addr }}" # FQDN if there is working DNS server, otherwise put the ip as a name
  username: "administrator@vsphere.local" 
  password: "{{ opinionated.master_password }}"
  datacenter: "Lab" # DC to create after deployment
  # Below are properties of parent cluster
  hosting_network: "{{ opinionated.hosting_network.base.port_group }}" # Parent port group where the vCenter VM will be deployed
  hosting_cluster: "{{ opinionated.hosting_cluster }}" # Parent cluster where the vCenter VM will be deployed
  hosting_datastore: "{{ opinionated.hosting_datastore }}" # Parent datastore where the vCenter VM will be deployed

nested_clusters: # You can add clusters in this section by duplicating the existing cluster
  compute: # This will be the name of the cluster in the nested  vCenter. Below are the minimum settings.
    enable_drs: True
    # HA can only be enabled if there is are datastores accessible by all hosts.
    enable_ha: True
    ha_host_monitoring: disabled
    # Below are properties of the hosting cluster
    hosting_cluster: "{{ opinionated.hosting_cluster }}" # the cluster where physical ESXi is connected to. The nested VMs will be deployed here
    hosting_datastore: "{{ opinionated.hosting_datastore }}" # Datastore target for nested ESXi VMs
    # Settings below are assigned to each host in the cluster
    management_vmk0_vlan: "{{ opinionated.hosting_network.base.vlan_id }}"
    vswitch0_vm_port_group_name: vm-network
    vswitch0_vm_port_group_vlan: "{{ opinionated.hosting_network.base.vlan_id }}"
    cpu_cores: "{{ opinionated.nested_hosts.cpu_cores }}" # CPU count
    ram_in_gb: "{{ opinionated.nested_hosts.ram_in_gb }}" # memory
    # In order list of disks to assign to the nested host. All will be marked as SSD.
    # Datastore names will be automatically be pre-pended with the hostname. E.g esx1
    # If the datastore_prefix property is removed the disk will not be set as a datastore
    # To leave the default OVA disks in place, delete this section.
    nested_hosts_disks: "{{ opinionated.nested_hosts.local_disks | default(omit) }}"
    # Added in vmnic order, these port groups must exist on the physical host
    # Must specify at least 2 port groups, up to a maximum of 10
    vmnic_physical_portgroup_assignment: 
      - name: "{{ opinionated.hosting_network.base.port_group }}"
      # - name: "{{ opinionated.hosting_network.base.port_group }}"
      - name: "{{ opinionated.hosting_network.workload.port_group }}"

opinionated_host_ip_ofset: 8
# You can add nested ESXi hosts below
nested_hosts: >-
  [
    {% for host_number in range(opinionated.number_of_hosts) %}
    {
      "name": "esx{{ host_number + 1 }}",
      "ip": "{{ opinionated.hosting_network.base.starting_addr | ipmath(opinionated_host_ip_ofset + host_number) }}",
      "mask": "{{ opinionated.hosting_network.base.cidr | ansible.netcommon.ipaddr('netmask') }}",
      "gw": "{{ opinionated.hosting_network.base.gateway }}",
      "nested_cluster": "compute"
    },
    {% endfor %}
  ]

distributed_switches: # To not create any distributed switches, comment this section.
  - vds_name: tkgs-vds
    mtu: 1500
    vds_version: 7.0.0
    clusters: # distributed switch will be attached to all hosts in the clusters defined
      - compute
    uplink_quantity: 1
    vmnics:
      - vmnic1
    distributed_port_groups: # Remove to create an empty VDS
      - port_group_name: management-pg
        vlan_id: "{{ opinionated.hosting_network.base.vlan_id |default(0) }}"
      - port_group_name: workload-pg
        vlan_id: "{{ opinionated.hosting_network.workload.vlan_id |default(0) }}"
  # - vds_name: tkgs-vds-workload
  #   mtu: 1500
  #   vds_version: 7.0.0
  #   clusters: # distributed switch will be attached to all hosts in the clusters defined
  #     - compute
  #   uplink_quantity: 1
  #   vmnics:
  #     - vmnic2
  #   distributed_port_groups: # Remove to create an empty VDS
  #     - port_group_name: workload-pg
  #       vlan_id: "{{ opinionated.hosting_network.workload.vlan_id |default(0) }}"

tkgs:
  cluster_ip_services_cidr: "10.255.255.0/24" # This will not be routed and is private within each cluster
  content_library_name: tkgs-library
  content_library_url: "http://wp-content.vmware.com/v2/latest/lib.json"
  datastore_tag_category: tkgs-storage-category    
  datastore_tag: tkgs-storage
  datastore_to_tag: datastore-esx1
  dns_server_list: ["{{ dns_server }}"]
  ntp_server_list: ["{{ ntp_server_ip }}"]
  management_port_group: vm-network
  management_netmask: "{{ opinionated.hosting_network.base.cidr | ansible.netcommon.ipaddr('netmask') }}"
  management_starting_address: "{{ opinionated.hosting_network.base.starting_addr | ipmath(3) }}"
  management_gateway: "{{ opinionated.hosting_network.base.gateway }}"
  storage_policy_name: tkgs-storage-policy
  supervisor_size: tiny
  vsphere_cluster: compute
  workload_port_group: workload-pg
  workload_address: "{{ opinionated.hosting_network.workload.cidr.split('/')[0] }}"
  workload_netmask: "{{ opinionated.hosting_network.workload.cidr | ansible.netcommon.ipaddr('netmask') }}"
  workload_gateway: "{{ opinionated.hosting_network.workload.gateway }}"
  workload_range_cidrs:
    # Line below will create a cidr of the second quarter of opinionated.hosting_network.workload.cidr
    - "{{ opinionated.hosting_network.workload.cidr | ansible.netcommon.ipsubnet((opinionated.hosting_network.workload.cidr.split('/')[1] |int)+2, 1) }}"

  router:
    uplink_ip_cidr: "{{ opinionated.hosting_network.base.starting_addr | ipmath(1) }}/{{ opinionated.hosting_network.base.cidr.split('/')[1] }}"
    uplink_next_hop: "{{ opinionated.hosting_network.base.gateway }}"
    internal_gateway_cidr: "{{ opinionated.hosting_network.workload.gateway }}/{{ opinionated.hosting_network.workload.cidr.split('/')[1] }}"
    internal_network_cidr: "{{ opinionated.hosting_network.workload.cidr }}"

  haproxy:
    username: admin
    password: "{{ opinionated.master_password }}"
    root_pwd: "{{ opinionated.master_password }}"
    nameservers: "{{ dns_server }}"
    management_ip: "{{ opinionated.hosting_network.base.starting_addr | ipmath(2) }}/{{ opinionated.hosting_network.base.cidr.split('/')[1] }}"
    management_port: "5556"
    management_gateway: "{{ opinionated.hosting_network.base.gateway }}"
    management_port_group: "management-pg"
    workload_ip: "{{ opinionated.hosting_network.workload.cidr | ipmath(2) }}/{{ opinionated.hosting_network.workload.cidr.split('/')[1] }}"
    workload_gateway: "{{ opinionated.hosting_network.workload.gateway }}"
    workload_port_group: "workload-pg"
    # Line below will create a cidr of the third quarter of opinionated.hosting_network.workload.cidr
    service_ip_range: "{{ opinionated.hosting_network.workload.cidr | ansible.netcommon.ipsubnet((opinionated.hosting_network.workload.cidr.split('/')[1] |int)+2, 2) }}" # Can be comma separated